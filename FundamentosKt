/*
fun main() {
   
    //println("o println serve para exibir textos no console")
    /*
     * para 
     * fazer
     * comentários de 
     * mais
     * de 
     * uma
     * linha
     */
    
    
}
*/
//--------------------------------------------------------------------------------------------------------------------------------------

/*
fun main() {
    //exercício: fazer um diálogo de minimo 10 linhas usando a declaração println()
    
    println("Rogers_ já viu a teoria dos números 3 6 9 ?")
    println("<Rogers> A teoria se surge através de que, quase tudo nesse mundo é resumido aos números 3,6,9 ")
    println("<???> Mas como assim? ")
    println("<Rogers> É assim. O ano tem 12 meses, resumindo você consegue dividir esses 12 por 6 ou por 3")
    println("<???> Mas não faz sentido Rogers")
    println("<Rogers> Calma rapaz, vou te fazer pensar agora")
    println("<Rogers> A água é formado por três átomos, que são: 2 hidrogênio e 1 oxigênio. Ou seja são três átomos que formam a água")
    println("<???> Oxi??")
    println("<Rogers> Uma gestação de uma mulher dura em torno de 9 meses. Conhecidência ou não")
    println("<Rogers> Tudo tem começo, meio e fim. 3 também ")
    println("<Rogers> O dia tem 24 horas, que são possíveis dividir pelos números 3 e 6")
    println("<Rogers> Bom eu acho que isso não é conhecidência, não é ")
    println("<???> Ai você tem um ponto, e é um belo ponto")
	
    //Variáveis - armazenam valores, dados, informações
    
    //val - não mutável - não podemos alterar seu valor
    //var - mutável - podemos alterar seu valor
    //
    //Tipos de variáveis: desafio p/ casa - NÃO É OBRIGATÓRIO!!!(OPCIONAL)
    //
    //String - 
    //Int -
    //Float -
    //Double - 
    //Long -
    //Boolean - 
    
}
*/
//-------------------------------------------------------------------------------------------------------------------------------------------------
/*
fun main() {
   //Tipos de variáveis: 
    //
    //String - armazena valores de tipo texto - dentro de ""  ==> ex: "abóbora" 
    //Int - armazena números inteiros ==> 7042
    //Float - armazena números reais (no geral) - necessita de um f no valor ==>72.24f
    //Double - armazena números quebrados(de forma arredondada) ==> 7.15
    //Long - armazena números longos ==> 54564386546546.784486
    //Boolean - verdadeiro ou falso ==> true, false
    /*
    var cr7 = "Cristiano Ronaldo" 
    var numeroChampions = 5 
    var altura = 1.87
    
    //Concatenação
    
    print("O nome dele é " + cr7 + ", ele tem " + numeroChampions)
    println(" titúlos de Champions League e ele tem " + altura + " de altura SIIIIUU eu sou u miliorr")
    
    var laPulga = "Lionel Messi"
    var champions = 4
    var alturaDele = 1.02
    
    print("O nome dele é $laPulga, ele tem $champions títulos de chamions, ")
    println("e ele tem apenas $alturaDele de altura")
    */
    //Faça uma apresentação de si mesmo, usando no mínimo 
    //5 variáveis e usando o método de concatenação
    /*
    val nome = "José"
    val sobrenome = "Nestor"
    val dia = 5 
    val mes = "junho"
    val ano = "1575 a.C." 
    
    println("Olá, meu jovem, meu nome é $nome  $sobrenome e eu nasci no dia $dia de $mes de $ano")
    */
    
    //Operadores matemáticos
    //
    // + => adição
    // - => subtração
    // / => divisão
    // * => multiplicação
    // % => módulo - o resto de uma divisão
    
    //println(15 % 2) 
    //
    //Operadores Relacionais 
    //
    //
    // == => igual a...
    // != => diferente de...
    // > => maior que... 
    // < => menor que...
    // >= -> maior ou igual a...
    // <= -> menor ou igual a...
    
    
    
    
    
}

*/
//------------------------------------------------------------------------------------------------------------
fun main() {
   
  //Operadores lógicos
  //
  //são usados quando queremos comparar mais de uma coisa na mesma condição
  //
  // && -> e (shift + 7)
  // || -> ou (shift + barra invertida)
  // 
  //  TABELA VERDADE (com E e OU)
  //  
  // && - a determinada ação só acontecerá se e somente se todas as 
  // condições forem verdadeiras
  // 
  // VV -> verdadeiro
  // VF -> falso
  // FV -> falso
  // FF -> falso
  // 
  // || - a determinada ação será executada se pelo menos uma das 
  // condições forem verdadeiras
  // 
  // VV -> verdadeiro
  // VF -> verdadeiro
  // FV -> verdadeiro
  // FF -> falso
  // 
  // 
  // Show do Péricles
  /*
  
  var idade = 13
  var acompanhadoDosPais = false
  
  
  if(idade >= 14 || acompanhadoDosPais == true){
      println("Pode entrar, curte ae")
  }else{
      println("a entrada não permitida para você")
  }   
  */
  //Exercício - A seleção Brasileira está correndo risco de ser eliminada na fase de grupos
  //da Copa, o Brasil, só pode se classificar se a Alemanha perder, e se o próprio Brasil
  //ganhar. As partidas ja passaram , quero saber se o Brasil se classificou ou não
  //
  // detalhe: use os operadores Lógicos
   
    var eliminação = true
    var classificação = false  
    
    if(eliminação <= ||  == false )}


fun main() {
   /*
    //println("o println serve para exibir textos no console")
    /*
     * para 
     * fazer
     * comentários de 
     * mais
     * de 
     * uma
     * linha
     */
    
    
  //Exercício - A seleção Brasileira está correndo risco de ser eliminada na fase de grupos
  //da Copa, o Brasil, só pode se classificar se a Alemanha perder, e se o próprio Brasil
  //ganhar. As partidas ja passaram , quero saber se o Brasil se classificou ou não
  //
  // detalhe: use os operadores Lógicos
   
    var brasil = false
    var alemanha = true  
    var marrocos = true

    if(!alemanha && brasil && !marrocos){
        println("Pode isso arnaldo,Brasil classificado!!! Rumo ao hexa Haja Coração")
    }else{
        println("Acabooou, eu só queria dar alegria pro meu povo")
    }
    */
        
    // When - Quando
    // 
    // Quando uma determinada condição for verdadeira, outra determinada
    // ação será executada
    // 
    // Estrutura do When:
    // 
    // When(var){
    // valor -> ação a ser executada
    // outroValor -> ação
    // maisUm -> ação
    // outro -> ação
    // else -> ação
    // }
    // 
    var mes = 2 
    
    when(mes){
        1 ->  println("Acapulco - MEX")
        2 ->  println("Paris - FRA")
        3 ->  println("Berlim - ALE")
        4 ->  println("Monaco - MON")
        5 ->  println("Pequim - CHI")
        6 ->  println("Acre - BRA")
        7 ->  println("Roma - Itália")
        8 ->  println("Atenas - GRE")
        9 ->  println("Madrid - ESP")
        10 -> println("Manchester - ING")
        11 -> println("Dubai - EAU")
        else -> println("São Paulo - BRA")
}
}

fun main() {
    
    //Laços de repetição
    //While 
    //Do
    //
    // for - para...
    // 
    // for - para cada item em uma lista/ ou qualquer tipo de coleção, será executado uma
    // determinada ação
    // 
    // Estrutura do for:
    // for (item in lista/colection){
    // ação
    // }
    //
   /* for(item in 1..10){
        println(item)
    }
  
   //Exercício: faça a tabuada de um numéro de sua escolha ( sem a do 0, a do 01, do 2 e do 10)
   //. observação: precisa utilizar o laço for
   
   for(item in 5..1)
     println(5*1)
     println(5*2)
     println(5*3)
     println(5*4)
     println(5*5)
     println(5*6)
     println(5*7)
     println(5*8)
     println(5*9)
     println(5*10)
     */
     //Repeat - Repita...
     //
     //uma determinação será repetida um determinado número de vezes
     //
     //
      var tartaruga = 1 
      repeat(10){
          println("||-------------tartaruga------------||")
          tartaruga++
}
}
//**********************************************************************
/**
 * You can edit, run, and share this code.
 * play.kotlinlang.org
 */
fun main() {
    
    //Collections - Coleções
    //
    //<> --> tags - servem para especificar o tipo de valor a ser listado
    //
    // São determinados conjuntos de itens que podem ser modelados e utilizados
    // em determinados métodos e operações
    // 
    // List - Listas
    // 
    // ListOf --> Listam itens de variados tipos
    // 
    
    var genericList = mutableListOf("São Paulo, arroz e pamonha", 25.7f, 23.974, '$', false)
    println(genericList)
    var specifcList = listOf<String>("Cruzeiro do Roberto Carlos","Calleri", "5")
    println(specifcList)
    
    
  // Index - uma posição da collection
  
    //Propriedades - List
    //
    // .LastIndex
    // .size
    // 
    // 
    //println(specifcList.lastIndex)
    //println(specifcList.first())
    //println(specifcList.size)
    //
    //println(specifcList.get(0))
    //println(specifcList.indexOf("Cruzeiro do roberto carlos"))
    
    //Métodos - listOf
    /*
    genericList.add(2, "easy")
    println(genericList)
    genericList.remove(23.974)
    println(genericList)
    genericList.removeAt(3)
    println(genericList)
    genericList.set(0, "tartaruga")
    println(genericList)
    genericList.clear()
    println(genericList)
    */
    var anotherList = setOf("Pedro", "Diniz", "Pelé", "Ronaldinho", "Marília Mendonça", "Diniz")
    println(anotherList)
    
    var animal = mutableMapOf("tartaruga" to 0, "jabuti" to 1, "tucano" to 2, "Hiena" to 3, "Macaco" to 4)
    println(animal)
}
///////////////////////////////////////////////////////////////////////////////////////////////////

fun main() {
    /*
     var animal = mutableMapOf("tartaruga" to 0, "jabuti" to 1, "tucano" to 2, "Hiena" to 3, "Macaco" to 4)
    println(animal)
    
    animal.put("capivara incrivel", 5)
    println(animal)
    animal.put("leopardo", 9)
    println(animal)
    animal.replace("tatu",3)
    println(animal)
    */
     
     //POO
     //
     // Programação Orientada a Objetos
     // 
     // Objetos - estados (características: nome, idade, cpf,  )
     // 
     // Comportamentos - (andar, comer, dormir, conversar, programar)
     // 
     // Classes - Modelos que servem para construção de objetos derivados
     // 
     val pessoa1 = Pessoa()
     pessoa1.nome = "Keyla"
     println(pessoa1.nome)
     pessoa1.cpf = "445.177.465.78"
     println(pessoa1.cpf)
     pessoa1.idade = 99
     println(pessoa1.idade)
     pessoa1.altura = 1.74
     println(pessoa1.altura)
     
 }   
     
   class Pessoa(){
       //declaração de atributos para a classe Pessoa
       var nome = ""
       var cpf = ""
       var idade = 99
       var altura = 1.74
       
       
    //exercício - Faça uma ficha médica, apontando os resultado do último checkup de um cliente
    //.permitido usar a mesma classe Pessoa()
    
    var Paciente1 = Paciente()
    Paciente1.nome = "Aline"
    println(Paciente1.nome)
    Paciente1.peso = 60kg
    println(Paciente1.peso)
    Paciente1."data de nascimento" =
    println(Paciente."data de nascimento")
    println(Paciente1.peso)
    Paciente1.idade = 40
    println(Paciente1.idade)
    Paciente1.altura = 1.60
    println(Paciente1.altura)
    Paciente1.
     
        class Pessoa(){
       //declaração de atributos para a classe Pessoa
       var nome = ""
       var peso = ""     
       var "data de nascimento" = 08/03/1983
       var idade = 40
       var altura = 1.60
       
     
     
     
}
